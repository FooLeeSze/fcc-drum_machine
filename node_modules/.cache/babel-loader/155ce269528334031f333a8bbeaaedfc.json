{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lee Sze\\\\Documents\\\\fcc-frontend-lib-proj\\\\drum_machine\\\\drum_machine\\\\src\\\\DrumPadContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateDisplay } from './actions/display';\nimport { audioDispLibrary } from './utils/constants';\nimport { drumPadActiveStyle, drumPadNormalStyle } from './utils/constants';\nimport DrumPad from './components/DrumPad';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DrumPadContainer() {\n  _s();\n\n  const dispatch = useDispatch();\n  /*\r\n  const {libNum, audioFiles} = useSelector(state => state.audioFiles);\r\n    const [active, setActive] = React.useState({Q: false, W: false, E: false,\r\n                                              A: false, S: false, D: false,\r\n                                              Z: false, X: false, C: false})\r\n    function handlePadClick(event) {\r\n      let id = event.target.id;\r\n      const elem = document.getElementById(id + 'audio');\r\n      elem.currentTime = 0;\r\n      elem.load();\r\n      elem.play();\r\n        dispatch(updateDisplay(audioDispLibrary[libNum][event.target.id]))\r\n      \r\n      let newState = {...active};\r\n      newState[id] = true;\r\n      setActive(newState)\r\n        setTimeout(() => {\r\n          let newState2 = {...active};\r\n          newState2[id] = false;\r\n          setActive(newState2)}, 100)\r\n  }\r\n    // Function to handle key press and play drum pad audio\r\n  function handleKeyPress(event) {\r\n      if(event.key === \"q\" || event.key === 'w' || event.key === 'e' \r\n          || event.key === 'a' || event.key === 's' || event.key === 'd'\r\n          || event.key === 'z' || event.key === 'x' || event.key === 'c') {\r\n                \r\n          const elem = document.getElementById(event.key.toUpperCase() + 'audio');\r\n          elem.currentTime = 0;\r\n          elem.load();\r\n          elem.play();\r\n            dispatch(updateDisplay(audioDispLibrary[libNum][event.key.toUpperCase()]))\r\n            const id = event.key.toUpperCase();\r\n          let newState = {...active};\r\n          newState[id] = true;\r\n          setActive(newState)\r\n            setTimeout(() => {\r\n              let newState2 = {...active};\r\n              newState2[id] = false;\r\n              setActive(newState2)}, 100)\r\n      }\r\n  }\r\n    useEffect( () => {\r\n      window.addEventListener('keydown', handleKeyPress);\r\n  })*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"drum-pad-container\",\n    children: [/*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"Q\",\n      index: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"W\",\n      index: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"E\",\n      index: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"A\",\n      index: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"S\",\n      index: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"D\",\n      index: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"Z\",\n      index: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"X\",\n      index: \"7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DrumPad, {\n      id: \"C\",\n      index: \"8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n/*\r\n<button style={active['Q'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\"  id=\"Q\" onClick={handlePadClick} onKeyDown={handleKeyPress} tabIndex=\"0\">Q\r\n                <audio id=\"Qaudio\">\r\n                    <source src={audioFiles[0]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['W'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"W\" onClick={handlePadClick}>W\r\n                <audio id=\"Waudio\">\r\n                    <source src={audioFiles[1]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['E'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"E\" onClick={handlePadClick}>E\r\n                <audio id=\"Eaudio\">\r\n                    <source src={audioFiles[2]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['A'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"A\" onClick={handlePadClick}>A\r\n                <audio id=\"Aaudio\">\r\n                    <source src={audioFiles[3]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['S'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"S\" onClick={handlePadClick}>S\r\n                <audio id=\"Saudio\">\r\n                    <source src={audioFiles[4]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['D'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"D\" onClick={handlePadClick}>D\r\n                <audio id=\"Daudio\">\r\n                    <source src={audioFiles[5]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['Z'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"Z\" onClick={handlePadClick}>Z\r\n                <audio id=\"Zaudio\">\r\n                    <source src={audioFiles[6]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['X'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"X\" onClick={handlePadClick}>X\r\n                <audio id=\"Xaudio\">\r\n                    <source src={audioFiles[7]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['C'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"C\" onClick={handlePadClick}>C\r\n                <audio id=\"Caudio\">\r\n                    <source src={audioFiles[8]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n\r\n            */\n\n_s(DrumPadContainer, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DrumPadContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrumPadContainer\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","updateDisplay","audioDispLibrary","drumPadActiveStyle","drumPadNormalStyle","DrumPad","DrumPadContainer","dispatch"],"sources":["C:/Users/Lee Sze/Documents/fcc-frontend-lib-proj/drum_machine/drum_machine/src/DrumPadContainer.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateDisplay } from './actions/display'\r\nimport { audioDispLibrary } from './utils/constants';\r\nimport { drumPadActiveStyle, drumPadNormalStyle } from './utils/constants';\r\nimport DrumPad from './components/DrumPad';\r\n\r\n\r\nexport default function DrumPadContainer() {\r\n    const dispatch = useDispatch();\r\n\r\n    /*\r\n    const {libNum, audioFiles} = useSelector(state => state.audioFiles);\r\n\r\n    const [active, setActive] = React.useState({Q: false, W: false, E: false,\r\n                                                A: false, S: false, D: false,\r\n                                                Z: false, X: false, C: false})\r\n\r\n    function handlePadClick(event) {\r\n        let id = event.target.id;\r\n        const elem = document.getElementById(id + 'audio');\r\n        elem.currentTime = 0;\r\n        elem.load();\r\n        elem.play();\r\n\r\n        dispatch(updateDisplay(audioDispLibrary[libNum][event.target.id]))\r\n        \r\n        let newState = {...active};\r\n        newState[id] = true;\r\n        setActive(newState)\r\n\r\n        setTimeout(() => {\r\n            let newState2 = {...active};\r\n            newState2[id] = false;\r\n            setActive(newState2)}, 100)\r\n    }\r\n\r\n    // Function to handle key press and play drum pad audio\r\n    function handleKeyPress(event) {\r\n        if(event.key === \"q\" || event.key === 'w' || event.key === 'e' \r\n            || event.key === 'a' || event.key === 's' || event.key === 'd'\r\n            || event.key === 'z' || event.key === 'x' || event.key === 'c') {\r\n\r\n                \r\n            const elem = document.getElementById(event.key.toUpperCase() + 'audio');\r\n            elem.currentTime = 0;\r\n            elem.load();\r\n            elem.play();\r\n\r\n            dispatch(updateDisplay(audioDispLibrary[libNum][event.key.toUpperCase()]))\r\n\r\n            const id = event.key.toUpperCase();\r\n            let newState = {...active};\r\n            newState[id] = true;\r\n            setActive(newState)\r\n\r\n            setTimeout(() => {\r\n                let newState2 = {...active};\r\n                newState2[id] = false;\r\n                setActive(newState2)}, 100)\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        window.addEventListener('keydown', handleKeyPress);\r\n    })*/\r\n\r\n    return (\r\n        <div id=\"drum-pad-container\">\r\n            <DrumPad id=\"Q\" index=\"0\" />\r\n            <DrumPad id=\"W\" index=\"1\" />\r\n            <DrumPad id=\"E\" index=\"2\" />\r\n            <DrumPad id=\"A\" index=\"3\" />\r\n            <DrumPad id=\"S\" index=\"4\" />\r\n            <DrumPad id=\"D\" index=\"5\" />\r\n            <DrumPad id=\"Z\" index=\"6\" />\r\n            <DrumPad id=\"X\" index=\"7\" />\r\n            <DrumPad id=\"C\" index=\"8\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n/*\r\n<button style={active['Q'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\"  id=\"Q\" onClick={handlePadClick} onKeyDown={handleKeyPress} tabIndex=\"0\">Q\r\n                <audio id=\"Qaudio\">\r\n                    <source src={audioFiles[0]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['W'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"W\" onClick={handlePadClick}>W\r\n                <audio id=\"Waudio\">\r\n                    <source src={audioFiles[1]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['E'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"E\" onClick={handlePadClick}>E\r\n                <audio id=\"Eaudio\">\r\n                    <source src={audioFiles[2]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['A'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"A\" onClick={handlePadClick}>A\r\n                <audio id=\"Aaudio\">\r\n                    <source src={audioFiles[3]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['S'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"S\" onClick={handlePadClick}>S\r\n                <audio id=\"Saudio\">\r\n                    <source src={audioFiles[4]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['D'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"D\" onClick={handlePadClick}>D\r\n                <audio id=\"Daudio\">\r\n                    <source src={audioFiles[5]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['Z'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"Z\" onClick={handlePadClick}>Z\r\n                <audio id=\"Zaudio\">\r\n                    <source src={audioFiles[6]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['X'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"X\" onClick={handlePadClick}>X\r\n                <audio id=\"Xaudio\">\r\n                    <source src={audioFiles[7]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n            <button style={active['C'] ? drumPadActiveStyle : drumPadNormalStyle} type=\"button\" className=\"pad\" id=\"C\" onClick={handlePadClick}>C\r\n                <audio id=\"Caudio\">\r\n                    <source src={audioFiles[8]} type=\"audio/wav\"></source>\r\n                </audio>\r\n            </button>\r\n\r\n            */"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,mBAAvD;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAGA,eAAe,SAASC,gBAAT,GAA4B;EAAA;;EACvC,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAYI,oBACI;IAAK,EAAE,EAAC,oBAAR;IAAA,wBACI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QALJ,eAMI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QANJ,eAOI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QAPJ,eAQI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QARJ,eASI,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAgB,KAAK,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QATJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA1HwBM,gB;UACHN,W;;;KADGM,gB"},"metadata":{},"sourceType":"module"}